buildscript{

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://dl.bintray.com/kotlin/kotlin-eap"
        }
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:$frontend_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}


group "com.rnett.ligraph.eve.market"
version "-SNAPSHOT"

apply plugin: 'kotlin-multiplatform'

apply plugin: 'org.jetbrains.kotlin.frontend'

apply plugin: 'kotlinx-serialization'

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven{ url 'https://jitpack.io' }
    maven { url "https://dl.bintray.com/soywiz/soywiz" }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm') {
            compilations.all {
                tasks[compilations.main.compileKotlinTaskName].kotlinOptions {
                    jvmTarget = '1.8'
                }
            }
        }
        fromPreset(presets.js, 'js')
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"


                implementation 'com.github.rnett.kframe-data:kframe-data:-SNAPSHOT'
                implementation 'com.github.rnett.sde-multiplatform:sde-multiplatform:-SNAPSHOT'

                implementation "com.soywiz:klock:$klock_version"
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

                //implementation "com.github.rnett:sde:$sde_version"
                implementation "com.github.rnett:core:$core_version"

                implementation "org.jetbrains.exposed:exposed:$exposed_version"

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

                implementation "org.deeplearning4j:deeplearning4j-core:$dl4j_version"
                implementation "org.nd4j:nd4j-native-platform:$dl4j_version"
                //implementation "org.datavec:datavec-api:jar:$dl4j_version"

                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-apache:$ktor_version"

                implementation "com.github.salomonbrys.kotson:kotson:$kotson_version"
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"

                implementation "com.github.rnett:kframejs:$kframejs_version"
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
    }
}


compileKotlinJs {
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
    kotlinOptions.moduleKind = "amd"
}

kotlinFrontend {
    downloadNodeJsVersion = "latest"
}

sourceCompatibility = JavaVersion.VERSION_1_8